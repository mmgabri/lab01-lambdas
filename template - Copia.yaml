AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Projeto Lab

Globals:
  Function:
    Timeout: 20

#------------  Parameters ------------#
Parameters:
  ParameterAcessKey:
    Type: String
    Default: "AKIASEICDKSYQCQ22ONQ"
  ParameterSecretKey:
    Type: String
    Default: "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"
  ParameterClientId:
    Type: String
    Default: "1dvekd807buibj92s4vn1jd901"
  ParameterUserPool:
    Type: String
    Default: "us-east-1_MsqKPhJ3m"
  ParameterCognitoUserPoolArn:
    Description: ARN of the Cognito User Pool
    Type: "String"
    Default: "arn:aws:cognito-idp:us-east-1:146570171569:userpool/us-east-1_MsqKPhJ3m"
  ParameterTableNameAnuncio:
    Type: String
    AllowedPattern: "[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+"
    Default: anuncios
  ParameterTableNameChat:
    Type: String
    Default: chats
  ParameterLambdaAnuncioName:
    Type: String
    AllowedPattern: "[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+"
    Default: anuncio-function
  ParameterLambdaUserName:
    Type: String
    AllowedPattern: "[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+"
    Default: user-function
  ParameterLambdaChatName:
    Type: String
    AllowedPattern: "[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+"
    Default: chat-function
  ParameterApiGatewayName:
    Type: String
    AllowedPattern: "[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+"
    Default: lab01-lambdas
  ParameterApiGatewayStageName:
    Type: String
    Default: "Prod"

Resources:
  #------------  Api Gateway ------------#
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Ref ParameterApiGatewayName
      StageName: Prod
      Auth:
        ApiKeyRequired: true
        DefaultAuthorizer: CognitoAuth 
        Authorizers:
          CognitoAuth:
            UserPoolArn: !Ref ParameterCognitoUserPoolArn
            Identity: 
              Header: Authorization 

  #------------ Api Gateway - Api Key ------------#
  ApiKey:
    Type: 'AWS::ApiGateway::ApiKey'
    DependsOn:
      - ApiGatewayProdStage
    Properties:
      Name: !Join ["", [{"Ref": "AWS::StackName"}, "-apikey"]]
      Enabled: true
      StageKeys:
        - RestApiId: !Ref ApiGateway
          StageName: !Ref ParameterApiGatewayStageName

  #------------ Api Gateway - Api Key ------------#
  UsagePlan:
    Type: 'AWS::ApiGateway::UsagePlan'
    DependsOn:
      - ApiGatewayProdStage
    Properties:
      ApiStages:
        - ApiId: !Ref ApiGateway
          Stage: !Ref ParameterApiGatewayStageName
      Quota:
        Limit: 1000
        Period: MONTH
      Throttle:
        BurstLimit: 20
        RateLimit: 10
      UsagePlanName: !Join ["", [{"Ref": "AWS::StackName"}, "-usage-plan"]]  

  #------------ Api Gateway - Usage Plan Key ------------#
  UsagePlanKey:
    Type: 'AWS::ApiGateway::UsagePlanKey'
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlan

  #------------ Lambda Function - User ------------#
  UserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Ref ParameterLambdaUserName
      CodeUri: userFunction
      Handler: mmgabri.lambda.Handler::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          CLIENT_ID: !Ref ParameterClientId
          USER_POOL: !Ref ParameterUserPool
          ACESS_KEY: !Ref ParameterAcessKey
          SECRET_KEY: !Ref ParameterSecretKey
      Events:
        Signup:
          Type: Api
          Properties:
            Path: /users/signup
            RestApiId: !Ref ApiGateway
            Method: post
            Auth:
              Authorizer: NONE
        ConfirmSignup:
          Type: Api
          Properties:
            Path: /users/confirmsignup
            RestApiId: !Ref ApiGateway
            Method: post
            Auth:
              Authorizer: NONE
        Signin:
          Type: Api
          Properties:
            Path: /users/signin
            RestApiId: !Ref ApiGateway
            Method: post
            Auth:
              Authorizer: NONE
        Signout:
          Type: Api
          Properties:
            Path: /users/signout
            RestApiId: !Ref ApiGateway
            Method: post

  #------------ Lambda Function - Anuncio ------------#
  AnuncioFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Ref ParameterLambdaAnuncioName
      CodeUri: anuncioFunction
      Handler: mmgabri.lambda.Handler::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          TABLE_NAME: !Ref ParameterTableNameAnuncio
      Events:
        EventHello1:
          Type: Api
          Properties:
            Method: POST
            Path: '/anuncios/hello'
            RestApiId: !Ref ApiGateway
        EventHello2:
          Type: Api
          Properties:
            Method: POST
            Path: '/anuncios/hello2'
            RestApiId: !Ref ApiGateway
            Auth:
              Authorizer: NONE