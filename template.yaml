AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Projeto Lab

Globals:
  Api:
    BinaryMediaTypes:
      - "multipart/form-data"
  Function:
    Timeout: 20

#------------  Parameters ------------#
Parameters:
  ParameterAcessKey:
    Type: String
    Default: "AKIASEICDKSYSBPV6UPE"
  ParameterSecretKey:
    Type: String
    Default: "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"
  ParameterClientId:
    Type: String
    Default: "1dvekd807buibj92s4vn1jd901"
  ParameterUserPool:
    Type: String
    Default: "us-east-1_MsqKPhJ3m"
  ParameterPlatformApplicationArn:
    Description: ARN of the SNS
    Type: "String"
    Default: "arn:aws:sns:us-east-1:146570171569:app/GCM/PushNotificationsLab01"
  ParameterCognitoUserPoolArn:
    Description: ARN of the Cognito User Pool
    Type: "String"
    Default: "arn:aws:cognito-idp:us-east-1:146570171569:userpool/us-east-1_MsqKPhJ3m"
  ParameterTableNameAnuncio:
    Type: String
    AllowedPattern: "[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+"
    Default: anuncio
  ParameterTableNameChat:
    Type: String
    Default: chat
  ParameterTableNameUser:
    Type: String
    Default: user
  ParameterLambdaAnuncioName:
    Type: String
    AllowedPattern: "[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+"
    Default: anuncio-function
  ParameterLambdaUserName:
    Type: String
    AllowedPattern: "[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+"
    Default: user-function
  ParameterLambdaChatName:
    Type: String
    AllowedPattern: "[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+"
    Default: chat-function
  ParameterLambdaChatDDBStreamName:   
    Type: String
    AllowedPattern: "[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+"
    Default: streamDDB-chat-function
  ParameterApiGatewayName:
    Type: String
    AllowedPattern: "[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+"
    Default: lab01-lambdas
  ParameterApiGatewayStageName:
    Type: String
    Default: "Prod"
  ParameterBucketName:
    Type: String
    Default: 'mmgabri-aws3-lab01-images'  

Resources:

#------------  Bucket S3 ------------#
  InputS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref ParameterBucketName

  #------------  Api Gateway ------------#
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Ref ParameterApiGatewayName
      StageName: Prod
      Auth:
        ApiKeyRequired: true
        DefaultAuthorizer: CognitoAuth 
        Authorizers:
          CognitoAuth:
            UserPoolArn: !Ref ParameterCognitoUserPoolArn
            Identity: 
              Header: Authorization 

  #------------ Api Gateway - Api Key ------------#
  ApiKey:
    Type: 'AWS::ApiGateway::ApiKey'
    DependsOn:
      - ApiGatewayProdStage
    Properties:
      Name: !Join ["", [{"Ref": "AWS::StackName"}, "-apikey"]]
      Enabled: true
      StageKeys:
        - RestApiId: !Ref ApiGateway
          StageName: !Ref ParameterApiGatewayStageName

  #------------ Api Gateway - Api Key ------------#
  UsagePlan:
    Type: 'AWS::ApiGateway::UsagePlan'
    DependsOn:
      - ApiGatewayProdStage
    Properties:
      ApiStages:
        - ApiId: !Ref ApiGateway
          Stage: !Ref ParameterApiGatewayStageName
      Quota:
        Limit: 10000
        Period: MONTH
      Throttle:
        BurstLimit: 30
        RateLimit: 10
      UsagePlanName: !Join ["", [{"Ref": "AWS::StackName"}, "-usage-plan"]]  

  #------------ Api Gateway - Usage Plan Key ------------#
  UsagePlanKey:
    Type: 'AWS::ApiGateway::UsagePlanKey'
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlan

  #------------ Lambda Function - User ------------#
  UserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Ref ParameterLambdaUserName
      CodeUri: functionUser
      Handler: mmgabri.lambda.Handler::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ParameterTableNameUser
      Environment:
        Variables:
          CLIENT_ID: !Ref ParameterClientId
          USER_POOL: !Ref ParameterUserPool
          ACESS_KEY: !Ref ParameterAcessKey
          SECRET_KEY: !Ref ParameterSecretKey
      Events:
        Signup:
          Type: Api
          Properties:
            Path: /users/signup
            RestApiId: !Ref ApiGateway
            Method: post
            Auth:
              Authorizer: NONE
        ConfirmSignup:
          Type: Api
          Properties:
            Path: /users/confirmsignup
            RestApiId: !Ref ApiGateway
            Method: post
            Auth:
              Authorizer: NONE
        Signin:
          Type: Api
          Properties:
            Path: /users/signin
            RestApiId: !Ref ApiGateway
            Method: post
            Auth:
              Authorizer: NONE
        Signout:
          Type: Api
          Properties:
            Path: /users/signout
            RestApiId: !Ref ApiGateway
            Method: post
        RegisterAdvice:
          Type: Api
          Properties:
            Path: /users/registeradvice
            RestApiId: !Ref ApiGateway
            Method: post

  #------------ Lambda Function - Anuncio ------------#
  AnuncioFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Ref ParameterLambdaAnuncioName
      CodeUri: functionAnuncio
      Handler: com.mmgabri.lambda.Handler::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          BUCKET_NAME: !Ref ParameterBucketName
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ParameterTableNameAnuncio
        - S3CrudPolicy:
            BucketName: !Ref ParameterBucketName     
      Events:
        Create:
          Type: Api
          Properties:
            Method: POST
            Path: '/anuncios'
            RestApiId: !Ref ApiGateway
        GetAll:
          Type: Api
          Properties:
            Method: GET
            Path: '/anuncios'
            Auth:
              Authorizer: NONE
            RestApiId: !Ref ApiGateway
        GetByUser:
          Type: Api
          Properties:
            Method: GET
            Path: '/anuncios/user/{userId}'
            RestApiId: !Ref ApiGateway
        GetByTipo:
          Type: Api
          Properties:
            Method: GET
            Auth:
              Authorizer: NONE
            Path: '/anuncios/tipo/{tipo}'
            RestApiId: !Ref ApiGateway
        GetByCategoria:
          Type: Api
          Properties:
            Method: GET
            Auth:
              Authorizer: NONE
            Path: '/anuncios/categoria/{categoria}'
            RestApiId: !Ref ApiGateway
        Delete:
          Type: Api
          Properties:
            Method: PUT
            Path: '/anuncios'
            RestApiId: !Ref ApiGateway
        Update:
          Type: Api
          Properties:
            Method: DELETE
            Path: '/anuncios'
            RestApiId: !Ref ApiGateway

    #------------ Lambda Function - Chat ------------#
  ChatFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Ref ParameterLambdaChatName
      CodeUri: functionChat
      Handler: com.mmgabri.lambda.Handler::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ParameterTableNameChat
        - DynamoDBCrudPolicy:
            TableName: !Ref ParameterTableNameUser
      Events:
        SendMessage:
          Type: Api
          Properties:
            Method: POST
            Path: '/chats'
            RestApiId: !Ref ApiGateway
        GetChatByUser:
          Type: Api
          Properties:
            Method: GET
            Path: '/chats/user/{userId}'
            RestApiId: !Ref ApiGateway
        GetMessages:
          Type: Api
          Properties:
            Method: GET
            Path: '/chats/messages'
            RequestParameters:
              - method.request.querystring.chatId:
                  Required: true
              - method.request.querystring.userIdLogged:
                  Required: true    
              - method.request.querystring.userIdConversation:
                  Required: true    
            RestApiId: !Ref ApiGateway

  #------------ Lambda Function - Chat DynamoDB Stream ------------#
  ChatDDBStreamFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Ref ParameterLambdaChatDDBStreamName
      CodeUri: functionChatDDBStream
      Handler: com.mmgabri.lambda.Handler::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Policies: AWSLambdaDynamoDBExecutionRole
      Environment:
        Variables:
          PLATFORM_APPLICATION_ARN: !Ref ParameterPlatformApplicationArn
      Events:
        Stream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt TableChat.StreamArn
            BatchSize: 1
            StartingPosition: TRIM_HORIZON
            FilterCriteria:
              Filters: 
                - Pattern: '{"dynamodb": {"Keys": {"sk": { "S": [{ "prefix": "MESSAGE#" }] }}}}'

  #Table DynamoDB Anuncio
  TableAnuncio: 
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: "pk_user"
          AttributeType: "S"
        - AttributeName: "sk_anuncio"
          AttributeType: "S"
        - AttributeName: "tipo_pk_index"
          AttributeType: "S"
        - AttributeName: "categoria_pk_index"
          AttributeType: "S"
      KeySchema: 
        - AttributeName: "pk_user"
          KeyType: "HASH"
        - AttributeName: "sk_anuncio"
          KeyType: "RANGE"    
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: !Ref ParameterTableNameAnuncio

      GlobalSecondaryIndexes: 
        - IndexName: "GSI_TIPO"
          KeySchema: 
            - AttributeName: "tipo_pk_index"
              KeyType: "HASH"
            - AttributeName: "sk_anuncio"
              KeyType: "RANGE"
          Projection: 
            ProjectionType: ALL
          ProvisionedThroughput: 
            ReadCapacityUnits: "5"
            WriteCapacityUnits: "5"

        - IndexName: "GSI_CATEGORIA"
          KeySchema: 
            - AttributeName: "categoria_pk_index"
              KeyType: "HASH"
            - AttributeName: "sk_anuncio"
              KeyType: "RANGE"
          Projection: 
            ProjectionType: ALL
          ProvisionedThroughput: 
            ReadCapacityUnits: "5"
            WriteCapacityUnits: "5"

  #Table DynamoDB Chat
  TableChat: 
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: "pk"
          AttributeType: "S"
        - AttributeName: "sk"
          AttributeType: "S"
        - AttributeName: "date_time_created"
          AttributeType: "S"
      KeySchema: 
        - AttributeName: "pk"
          KeyType: "HASH"
        - AttributeName: "sk"
          KeyType: "RANGE"    
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      StreamSpecification:
        StreamViewType: NEW_IMAGE
      TableName: !Ref ParameterTableNameChat

      GlobalSecondaryIndexes: 
        - IndexName: "GSI_01"
          KeySchema: 
            - AttributeName: "pk"
              KeyType: "HASH"
            - AttributeName: "date_time_created"
              KeyType: "RANGE"
          Projection: 
            ProjectionType: ALL
          ProvisionedThroughput: 
            ReadCapacityUnits: "5"
            WriteCapacityUnits: "5"
   
  #Table DynamoDB User
  TableUser: 
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: "user_id"
          AttributeType: "S"
        - AttributeName: "email"
          AttributeType: "S"
        - AttributeName: "date_time_created"
          AttributeType: "S"
      KeySchema: 
        - AttributeName: "user_id"
          KeyType: "HASH"
        - AttributeName: "date_time_created"
          KeyType: "RANGE"    
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: !Ref ParameterTableNameUser

      GlobalSecondaryIndexes: 
        - IndexName: "GSI_01"
          KeySchema: 
            - AttributeName: "email"
              KeyType: "HASH"
            - AttributeName: "date_time_created"
              KeyType: "RANGE"
          Projection: 
            ProjectionType: ALL
          ProvisionedThroughput: 
            ReadCapacityUnits: "5"
            WriteCapacityUnits: "5"